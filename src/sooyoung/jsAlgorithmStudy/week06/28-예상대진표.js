// 게임 대회가 개최되었습니다. 이 대회는 N 명이 참가하고 토너먼트 형식으로 진행합니다. N 명의
// 참가자에게 1 부터 N 번의 번호를 차례로 배정하고 , 1 번 ~*2 번 , 3 번 +*4 번 , ·.. , N - 1 번 ~*N 번 번호
// 를 부여한 참가자끼리 게임을 진행합니다. 각 게임에서 이긴 사람은 다음 라운드에 진출합니다. 이
// 때 다음 라운드에 진출할 참가자의 번호는 다시 1 번부터 N/2 번과 같이 차례로 배정합니다. 만약
// 1 번 ~2 번끼리 겨루는 게임에서 2 번이 승리하면 다음 라운드에서 2 번은 1 번으로 번호를 부여받습
// 니다. 3 번 ~*4 번끼리 겨루는 게임에서 3 번이 승리하면 다음 라운드에서 3 번은 2 번을 부여받습니
// 다. 게임은 최종 한 명이 남을 때까지 진행됩니다.
//   이때 첫 라운드에서 A 번을 가진 참가자는 경쟁자로 생각하는 B 번 참가자와 몇 번째 라운드에서 만
// 나는지 궁금해졌습니다. 게임 참가자 수 N, 참가자 번호 A, 경쟁자 번호 B 가 함수 solution()의
// 인수로 주어질 때 첫 라운드에서 A 번을 가진 참가자는 경쟁자로 생각하는 B번 참가자와 몇 번째
// 라운드에서 만나는지를 반환하는 solution() 함수를 완성하세요. 단 , A 번 참가자와 B 번 참가자는
// 서로 만나기 전까지 항상 이긴다고 가정합니다.
//   제약 조건
// • N : 21 이상 20 이하인 자연수 (2 의 지수로 주어지므로 부전승은 없음 )
// • A, B: N 이하인 자연수 ( 단 , A z B)
// 316둘째 마당 코딩 테스트 완전 정복
// 입출력의 예
// N
// 8 4
// B
// 7
// answer
// 3

const solution = (n, a, b) => {
  let answer = 0;
  while (a !== b) {
    a = Math.ceil(a / 2);
    b = Math.ceil(b / 2);
    answer++;
  }
  return answer;
};
