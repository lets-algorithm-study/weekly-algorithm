function solution(arr1, arr2) {
  // rows, columns
  const r1 = arr1.length;
  const c1 = arr1[0].length;

  const r2 = arr2.length;
  const c2 = arr2[0].length;

  // [
  //   [0, 0],
  //   [0, 0],
  //   [0, 0]
  // ]
  // 의 형태
  const result = [];
  for (let i = 0; i < r1; i++) {
    result.push(new Array(c2).fill(0));
  }

  for (let i = 0; i < r1; i++) {
    for (let j = 0; j < c2; j++) {
      // k를 c1만큼 돌린다 (=== r2 로 해도 되지만 관례적으로 c1으로 하는듯)
      for (let k = 0; k < c1; k++) {
        result[i][j] += arr1[i][k] * arr2[k][j];
      }
    }
  }

  return result;
}

console.log(
  solution(
    [
      [1, 4],
      [3, 2],
      [4, 1],
    ],
    [
      [3, 3],
      [3, 3],
    ]
  )
);

console.log(
  solution(
    [
      [2, 3, 1],
      [4, 1, 2],
    ],
    [
      [1, 2],
      [0, 3],
      [2, 1],
    ]
  )
);

/**
  i, j는 result 에 저장할 위치용 커서라고 생각하면 되고,
  k는 곱셈용 커서 라고 생각하면 된다. (곱한것들을 다 i,j에 합산해야 한다)
  행렬 1 에서는 가로로 다음 아이템으로 넘어가면서 곱하고,
  행렬 2에서는 세로로 다음 아이템으로 넘어가면서 곱해야 하니까

  예시:
  [
    [2, 3, 1],
    [4, 1, 2],
  ]
    곱하기
  [
    [1, 2],
    [0, 3],
    [2, 1],
  ]
    를 한다면, 결과는 2 * 2 가 나와야 한다. (1번행렬의 행 수 * 2번 행렬의 열 수)
  답은: [ [ 4, 14 ], [ 8, 13 ] ]
     여기서 ↑ 4를 구하는 과정을 살펴보자

  [Step 1] k = 0일 때:
  arr1[0][0] * arr2[0][0] = 2 * 1 = 2

  [2, 3, 1]    [[1, 2],
  [4, 1, 2]     [0, 3],
                [2, 1]]
  ↑              ↑
  i=0, k=0      k=0, j=0

  [Step 2] k = 1일 때:
  arr1[0][1] * arr2[1][0] = 3 * 0 = 0

  [2, 3, 1]    [[1, 2],
  [4, 1, 2]     [0, 3],
                [2, 1]]
     ↑           ↑
  i=0, k=1      k=1, j=0

  [Step 3] k = 2일 때:
  arr1[0][2] * arr2[2][0] = 1 * 2 = 2

  [2, 3, 1]    [[1, 2],
  [4, 1, 2]     [0, 3],
                [2, 1]]
        ↑           ↑
  i=0, k=2      k=2, j=0
 */
